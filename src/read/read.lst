                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module read
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _get_2
                                     12 	.globl _send_2
                                     13 	.globl _send_1
                                     14 	.globl _end
                                     15 	.globl _begin
                                     16 	.globl _asm_shift_in_2
                                     17 	.globl _asm_shift_out_2
                                     18 	.globl _shift_out
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _B
                                     95 	.globl _ACC
                                     96 	.globl _PSW
                                     97 	.globl _IP
                                     98 	.globl _P3
                                     99 	.globl _IE
                                    100 	.globl _P2
                                    101 	.globl _SBUF
                                    102 	.globl _SCON
                                    103 	.globl _P1
                                    104 	.globl _TH1
                                    105 	.globl _TH0
                                    106 	.globl _TL1
                                    107 	.globl _TL0
                                    108 	.globl _TMOD
                                    109 	.globl _TCON
                                    110 	.globl _PCON
                                    111 	.globl _DPH
                                    112 	.globl _DPL
                                    113 	.globl _SP
                                    114 	.globl _P0
                                    115 	.globl _read_RX_buffer
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 	.area RSEG    (ABS,DATA)
      000000                        120 	.org 0x0000
                           000080   121 _P0	=	0x0080
                           000081   122 _SP	=	0x0081
                           000082   123 _DPL	=	0x0082
                           000083   124 _DPH	=	0x0083
                           000087   125 _PCON	=	0x0087
                           000088   126 _TCON	=	0x0088
                           000089   127 _TMOD	=	0x0089
                           00008A   128 _TL0	=	0x008a
                           00008B   129 _TL1	=	0x008b
                           00008C   130 _TH0	=	0x008c
                           00008D   131 _TH1	=	0x008d
                           000090   132 _P1	=	0x0090
                           000098   133 _SCON	=	0x0098
                           000099   134 _SBUF	=	0x0099
                           0000A0   135 _P2	=	0x00a0
                           0000A8   136 _IE	=	0x00a8
                           0000B0   137 _P3	=	0x00b0
                           0000B8   138 _IP	=	0x00b8
                           0000D0   139 _PSW	=	0x00d0
                           0000E0   140 _ACC	=	0x00e0
                           0000F0   141 _B	=	0x00f0
                                    142 ;--------------------------------------------------------
                                    143 ; special function bits
                                    144 ;--------------------------------------------------------
                                    145 	.area RSEG    (ABS,DATA)
      000000                        146 	.org 0x0000
                           000080   147 _P0_0	=	0x0080
                           000081   148 _P0_1	=	0x0081
                           000082   149 _P0_2	=	0x0082
                           000083   150 _P0_3	=	0x0083
                           000084   151 _P0_4	=	0x0084
                           000085   152 _P0_5	=	0x0085
                           000086   153 _P0_6	=	0x0086
                           000087   154 _P0_7	=	0x0087
                           000088   155 _IT0	=	0x0088
                           000089   156 _IE0	=	0x0089
                           00008A   157 _IT1	=	0x008a
                           00008B   158 _IE1	=	0x008b
                           00008C   159 _TR0	=	0x008c
                           00008D   160 _TF0	=	0x008d
                           00008E   161 _TR1	=	0x008e
                           00008F   162 _TF1	=	0x008f
                           000090   163 _P1_0	=	0x0090
                           000091   164 _P1_1	=	0x0091
                           000092   165 _P1_2	=	0x0092
                           000093   166 _P1_3	=	0x0093
                           000094   167 _P1_4	=	0x0094
                           000095   168 _P1_5	=	0x0095
                           000096   169 _P1_6	=	0x0096
                           000097   170 _P1_7	=	0x0097
                           000098   171 _RI	=	0x0098
                           000099   172 _TI	=	0x0099
                           00009A   173 _RB8	=	0x009a
                           00009B   174 _TB8	=	0x009b
                           00009C   175 _REN	=	0x009c
                           00009D   176 _SM2	=	0x009d
                           00009E   177 _SM1	=	0x009e
                           00009F   178 _SM0	=	0x009f
                           0000A0   179 _P2_0	=	0x00a0
                           0000A1   180 _P2_1	=	0x00a1
                           0000A2   181 _P2_2	=	0x00a2
                           0000A3   182 _P2_3	=	0x00a3
                           0000A4   183 _P2_4	=	0x00a4
                           0000A5   184 _P2_5	=	0x00a5
                           0000A6   185 _P2_6	=	0x00a6
                           0000A7   186 _P2_7	=	0x00a7
                           0000A8   187 _EX0	=	0x00a8
                           0000A9   188 _ET0	=	0x00a9
                           0000AA   189 _EX1	=	0x00aa
                           0000AB   190 _ET1	=	0x00ab
                           0000AC   191 _ES	=	0x00ac
                           0000AF   192 _EA	=	0x00af
                           0000B0   193 _P3_0	=	0x00b0
                           0000B1   194 _P3_1	=	0x00b1
                           0000B2   195 _P3_2	=	0x00b2
                           0000B3   196 _P3_3	=	0x00b3
                           0000B4   197 _P3_4	=	0x00b4
                           0000B5   198 _P3_5	=	0x00b5
                           0000B6   199 _P3_6	=	0x00b6
                           0000B7   200 _P3_7	=	0x00b7
                           0000B0   201 _RXD	=	0x00b0
                           0000B1   202 _TXD	=	0x00b1
                           0000B2   203 _INT0	=	0x00b2
                           0000B3   204 _INT1	=	0x00b3
                           0000B4   205 _T0	=	0x00b4
                           0000B5   206 _T1	=	0x00b5
                           0000B6   207 _WR	=	0x00b6
                           0000B7   208 _RD	=	0x00b7
                           0000B8   209 _PX0	=	0x00b8
                           0000B9   210 _PT0	=	0x00b9
                           0000BA   211 _PX1	=	0x00ba
                           0000BB   212 _PT1	=	0x00bb
                           0000BC   213 _PS	=	0x00bc
                           0000D0   214 _P	=	0x00d0
                           0000D1   215 _F1	=	0x00d1
                           0000D2   216 _OV	=	0x00d2
                           0000D3   217 _RS0	=	0x00d3
                           0000D4   218 _RS1	=	0x00d4
                           0000D5   219 _F0	=	0x00d5
                           0000D6   220 _AC	=	0x00d6
                           0000D7   221 _CY	=	0x00d7
                                    222 ;--------------------------------------------------------
                                    223 ; overlayable register banks
                                    224 ;--------------------------------------------------------
                                    225 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        226 	.ds 8
                                    227 ;--------------------------------------------------------
                                    228 ; internal ram data
                                    229 ;--------------------------------------------------------
                                    230 	.area DSEG    (DATA)
      000000                        231 _read_RX_buffer_socket_10000_21:
      000000                        232 	.ds 3
      000003                        233 _read_RX_buffer_p1_20001_28:
      000003                        234 	.ds 2
      000005                        235 _read_RX_buffer_i_30001_29:
      000005                        236 	.ds 2
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable items in internal ram
                                    239 ;--------------------------------------------------------
                                    240 ;--------------------------------------------------------
                                    241 ; indirectly addressable internal ram data
                                    242 ;--------------------------------------------------------
                                    243 	.area ISEG    (DATA)
                                    244 ;--------------------------------------------------------
                                    245 ; absolute internal ram data
                                    246 ;--------------------------------------------------------
                                    247 	.area IABS    (ABS,DATA)
                                    248 	.area IABS    (ABS,DATA)
                                    249 ;--------------------------------------------------------
                                    250 ; bit data
                                    251 ;--------------------------------------------------------
                                    252 	.area BSEG    (BIT)
                                    253 ;--------------------------------------------------------
                                    254 ; paged external ram data
                                    255 ;--------------------------------------------------------
                                    256 	.area PSEG    (PAG,XDATA)
                                    257 ;--------------------------------------------------------
                                    258 ; uninitialized external ram data
                                    259 ;--------------------------------------------------------
                                    260 	.area XSEG    (XDATA)
                                    261 ;--------------------------------------------------------
                                    262 ; absolute external ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area XABS    (ABS,XDATA)
                                    265 ;--------------------------------------------------------
                                    266 ; initialized external ram data
                                    267 ;--------------------------------------------------------
                                    268 	.area XISEG   (XDATA)
                                    269 	.area HOME    (CODE)
                                    270 	.area GSINIT0 (CODE)
                                    271 	.area GSINIT1 (CODE)
                                    272 	.area GSINIT2 (CODE)
                                    273 	.area GSINIT3 (CODE)
                                    274 	.area GSINIT4 (CODE)
                                    275 	.area GSINIT5 (CODE)
                                    276 	.area GSINIT  (CODE)
                                    277 	.area GSFINAL (CODE)
                                    278 	.area CSEG    (CODE)
                                    279 ;--------------------------------------------------------
                                    280 ; global & static initialisations
                                    281 ;--------------------------------------------------------
                                    282 	.area HOME    (CODE)
                                    283 	.area GSINIT  (CODE)
                                    284 	.area GSFINAL (CODE)
                                    285 	.area GSINIT  (CODE)
                                    286 ;--------------------------------------------------------
                                    287 ; Home
                                    288 ;--------------------------------------------------------
                                    289 	.area HOME    (CODE)
                                    290 	.area HOME    (CODE)
                                    291 ;--------------------------------------------------------
                                    292 ; code
                                    293 ;--------------------------------------------------------
                                    294 	.area CSEG    (CODE)
                                    295 ;------------------------------------------------------------
                                    296 ;Allocation info for local variables in function 'read_RX_buffer'
                                    297 ;------------------------------------------------------------
                                    298 ;socket                    Allocated with name '_read_RX_buffer_socket_10000_21'
                                    299 ;ret                       Allocated to registers r4 
                                    300 ;i                         Allocated to registers r3 
                                    301 ;p1                        Allocated with name '_read_RX_buffer_p1_20001_28'
                                    302 ;i                         Allocated with name '_read_RX_buffer_i_30001_29'
                                    303 ;i                         Allocated to registers r6 r7 
                                    304 ;------------------------------------------------------------
                                    305 ;	.\read.c:8: unsigned char read_RX_buffer(unsigned char *socket){
                                    306 ;	-----------------------------------------
                                    307 ;	 function read_RX_buffer
                                    308 ;	-----------------------------------------
      000000                        309 _read_RX_buffer:
                           000007   310 	ar7 = 0x07
                           000006   311 	ar6 = 0x06
                           000005   312 	ar5 = 0x05
                           000004   313 	ar4 = 0x04
                           000003   314 	ar3 = 0x03
                           000002   315 	ar2 = 0x02
                           000001   316 	ar1 = 0x01
                           000000   317 	ar0 = 0x00
                                    318 ;	.\read.c:9: unsigned char ret = 0;
                                    319 ;	.\read.c:11: switch (*socket)
      000000 85 82*00         [24]  320 	mov	_read_RX_buffer_socket_10000_21,dpl
      000003 85 83*01         [24]  321 	mov	(_read_RX_buffer_socket_10000_21 + 1),dph
      000006 85 F0*02         [24]  322 	mov	(_read_RX_buffer_socket_10000_21 + 2),b
      000009 7C 00            [12]  323 	mov	r4,#0x00
      00000B 12r00r00         [24]  324 	lcall	__gptrget
      00000E FB               [12]  325 	mov	r3,a
      00000F 60 05            [24]  326 	jz	00101$
                                    327 ;	.\read.c:13: case 0:
      000011 BB 01 54         [24]  328 	cjne	r3,#0x01,00104$
      000014 80 2A            [24]  329 	sjmp	00102$
      000016                        330 00101$:
                                    331 ;	.\read.c:14: rw_ptr = get_2(0x0028, 0x08);
      000016 75*00 08         [24]  332 	mov	_get_2_PARM_2,#0x08
      000019 75*01 00         [24]  333 	mov	(_get_2_PARM_2 + 1),#0x00
      00001C 90 00 28         [24]  334 	mov	dptr,#0x0028
      00001F C0 04            [24]  335 	push	ar4
      000021 12r00r00         [24]  336 	lcall	_get_2
      000024 85 82*00         [24]  337 	mov	_rw_ptr,dpl
      000027 85 83*01         [24]  338 	mov	(_rw_ptr + 1),dph
                                    339 ;	.\read.c:15: rw_size = get_2(0x0026, 0x08);
      00002A 75*00 08         [24]  340 	mov	_get_2_PARM_2,#0x08
      00002D 75*01 00         [24]  341 	mov	(_get_2_PARM_2 + 1),#0x00
      000030 90 00 26         [24]  342 	mov	dptr,#0x0026
      000033 12r00r00         [24]  343 	lcall	_get_2
      000036 85 82*00         [24]  344 	mov	_rw_size,dpl
      000039 85 83*01         [24]  345 	mov	(_rw_size + 1),dph
      00003C D0 04            [24]  346 	pop	ar4
                                    347 ;	.\read.c:16: break;
                                    348 ;	.\read.c:17: case 1:
      00003E 80 28            [24]  349 	sjmp	00104$
      000040                        350 00102$:
                                    351 ;	.\read.c:18: rw_ptr = get_2(0x0028, 0x28);
      000040 75*00 28         [24]  352 	mov	_get_2_PARM_2,#0x28
      000043 75*01 00         [24]  353 	mov	(_get_2_PARM_2 + 1),#0x00
      000046 90 00 28         [24]  354 	mov	dptr,#0x0028
      000049 C0 04            [24]  355 	push	ar4
      00004B 12r00r00         [24]  356 	lcall	_get_2
      00004E 85 82*00         [24]  357 	mov	_rw_ptr,dpl
      000051 85 83*01         [24]  358 	mov	(_rw_ptr + 1),dph
                                    359 ;	.\read.c:19: rw_size = get_2(0x0026, 0x28);
      000054 75*00 28         [24]  360 	mov	_get_2_PARM_2,#0x28
      000057 75*01 00         [24]  361 	mov	(_get_2_PARM_2 + 1),#0x00
      00005A 90 00 26         [24]  362 	mov	dptr,#0x0026
      00005D 12r00r00         [24]  363 	lcall	_get_2
      000060 85 82*00         [24]  364 	mov	_rw_size,dpl
      000063 85 83*01         [24]  365 	mov	(_rw_size + 1),dph
      000066 D0 04            [24]  366 	pop	ar4
                                    367 ;	.\read.c:23: }
      000068                        368 00104$:
                                    369 ;	.\read.c:25: begin();
      000068 C0 04            [24]  370 	push	ar4
      00006A 12r00r00         [24]  371 	lcall	_begin
                                    372 ;	.\read.c:26: asm_shift_in_2(GET_HIGH_BITS(rw_ptr));
      00006D 85*01 82         [24]  373 	mov	dpl,(_rw_ptr + 1)
      000070 12r00r00         [24]  374 	lcall	_asm_shift_in_2
                                    375 ;	.\read.c:27: asm_shift_in_2(GET_LOW_BITS(rw_ptr));
      000073 85*00 82         [24]  376 	mov	dpl,_rw_ptr
      000076 12r00r00         [24]  377 	lcall	_asm_shift_in_2
      000079 D0 04            [24]  378 	pop	ar4
                                    379 ;	.\read.c:29: switch (*socket)
      00007B 85*00 82         [24]  380 	mov	dpl,_read_RX_buffer_socket_10000_21
      00007E 85*01 83         [24]  381 	mov	dph,(_read_RX_buffer_socket_10000_21 + 1)
      000081 85*02 F0         [24]  382 	mov	b,(_read_RX_buffer_socket_10000_21 + 2)
      000084 12r00r00         [24]  383 	lcall	__gptrget
      000087 FB               [12]  384 	mov	r3,a
      000088 60 05            [24]  385 	jz	00105$
                                    386 ;	.\read.c:31: case 0:
      00008A BB 01 18         [24]  387 	cjne	r3,#0x01,00108$
      00008D 80 0C            [24]  388 	sjmp	00106$
      00008F                        389 00105$:
                                    390 ;	.\read.c:33: asm_shift_in_2(0x18);
      00008F 75 82 18         [24]  391 	mov	dpl, #0x18
      000092 C0 04            [24]  392 	push	ar4
      000094 12r00r00         [24]  393 	lcall	_asm_shift_in_2
      000097 D0 04            [24]  394 	pop	ar4
                                    395 ;	.\read.c:34: break;
                                    396 ;	.\read.c:35: case 1: 
      000099 80 0A            [24]  397 	sjmp	00108$
      00009B                        398 00106$:
                                    399 ;	.\read.c:37: asm_shift_in_2(0x38);
      00009B 75 82 38         [24]  400 	mov	dpl, #0x38
      00009E C0 04            [24]  401 	push	ar4
      0000A0 12r00r00         [24]  402 	lcall	_asm_shift_in_2
      0000A3 D0 04            [24]  403 	pop	ar4
                                    404 ;	.\read.c:41: }
      0000A5                        405 00108$:
                                    406 ;	.\read.c:43: switch (*socket){
      0000A5 85*00 82         [24]  407 	mov	dpl,_read_RX_buffer_socket_10000_21
      0000A8 85*01 83         [24]  408 	mov	dph,(_read_RX_buffer_socket_10000_21 + 1)
      0000AB 85*02 F0         [24]  409 	mov	b,(_read_RX_buffer_socket_10000_21 + 2)
      0000AE 12r00r00         [24]  410 	lcall	__gptrget
      0000B1 FB               [12]  411 	mov	r3,a
      0000B2 60 09            [24]  412 	jz	00142$
      0000B4 BB 01 03         [24]  413 	cjne	r3,#0x01,00255$
      0000B7 02r01r38         [24]  414 	ljmp	00114$
      0000BA                        415 00255$:
      0000BA 02r01r83         [24]  416 	ljmp	00119$
                                    417 ;	.\read.c:45: for(int i = 0; i < 6; i++){
      0000BD                        418 00142$:
      0000BD 7B 00            [12]  419 	mov	r3,#0x00
      0000BF                        420 00125$:
      0000BF BB 06 00         [24]  421 	cjne	r3,#0x06,00256$
      0000C2                        422 00256$:
      0000C2 50 0A            [24]  423 	jnc	00110$
                                    424 ;	.\read.c:46: shift_out();
      0000C4 C0 03            [24]  425 	push	ar3
      0000C6 12r00r00         [24]  426 	lcall	_shift_out
      0000C9 D0 03            [24]  427 	pop	ar3
                                    428 ;	.\read.c:45: for(int i = 0; i < 6; i++){
      0000CB 0B               [12]  429 	inc	r3
      0000CC 80 F1            [24]  430 	sjmp	00125$
      0000CE                        431 00110$:
                                    432 ;	.\read.c:50: int p1 = asm_shift_out_2();
      0000CE 12r00r00         [24]  433 	lcall	_asm_shift_out_2
      0000D1 AB 82            [24]  434 	mov	r3, dpl
      0000D3 7A 00            [12]  435 	mov	r2,#0x00
                                    436 ;	.\read.c:51: p1 <<= 8;
      0000D5 8B*04            [24]  437 	mov	(_read_RX_buffer_p1_20001_28 + 1),r3
      0000D7 8A*03            [24]  438 	mov	_read_RX_buffer_p1_20001_28,r2
                                    439 ;	.\read.c:53: p1 |= asm_shift_out_2();
      0000D9 12r00r00         [24]  440 	lcall	_asm_shift_out_2
      0000DC AB 82            [24]  441 	mov	r3, dpl
      0000DE 7A 00            [12]  442 	mov	r2,#0x00
      0000E0 E5*04            [12]  443 	mov	a,(_read_RX_buffer_p1_20001_28 + 1)
      0000E2 42 02            [12]  444 	orl	ar2,a
                                    445 ;	.\read.c:55: P2_1 = 0;
                                    446 ;	assignBit
      0000E4 C2 A1            [12]  447 	clr	_P2_1
                                    448 ;	.\read.c:56: for(int i = 0; i < p1; i++){
      0000E6 E4               [12]  449 	clr	a
      0000E7 F5*05            [12]  450 	mov	_read_RX_buffer_i_30001_29,a
      0000E9 F5*06            [12]  451 	mov	(_read_RX_buffer_i_30001_29 + 1),a
      0000EB                        452 00128$:
      0000EB C3               [12]  453 	clr	c
      0000EC E5*05            [12]  454 	mov	a,_read_RX_buffer_i_30001_29
      0000EE 9B               [12]  455 	subb	a,r3
      0000EF E5*06            [12]  456 	mov	a,(_read_RX_buffer_i_30001_29 + 1)
      0000F1 64 80            [12]  457 	xrl	a,#0x80
      0000F3 8A F0            [24]  458 	mov	b,r2
      0000F5 63 F0 80         [24]  459 	xrl	b,#0x80
      0000F8 95 F0            [12]  460 	subb	a,b
      0000FA 50 36            [24]  461 	jnc	00113$
                                    462 ;	.\read.c:58: buffer[i] = asm_shift_out_2();
      0000FC E5*05            [12]  463 	mov	a,_read_RX_buffer_i_30001_29
      0000FE 24r00            [12]  464 	add	a, #_buffer
      000100 F9               [12]  465 	mov	r1,a
      000101 C0 03            [24]  466 	push	ar3
      000103 C0 02            [24]  467 	push	ar2
      000105 C0 01            [24]  468 	push	ar1
      000107 12r00r00         [24]  469 	lcall	_asm_shift_out_2
      00010A E5 82            [12]  470 	mov	a, dpl
      00010C D0 01            [24]  471 	pop	ar1
      00010E D0 02            [24]  472 	pop	ar2
      000110 D0 03            [24]  473 	pop	ar3
      000112 F7               [12]  474 	mov	@r1,a
                                    475 ;	.\read.c:59: if(i >= buffer_size){
      000113 AD*00            [24]  476 	mov	r5,_buffer_size
      000115 7F 00            [12]  477 	mov	r7,#0x00
      000117 C3               [12]  478 	clr	c
      000118 E5*05            [12]  479 	mov	a,_read_RX_buffer_i_30001_29
      00011A 9D               [12]  480 	subb	a,r5
      00011B E5*06            [12]  481 	mov	a,(_read_RX_buffer_i_30001_29 + 1)
      00011D 64 80            [12]  482 	xrl	a,#0x80
      00011F 8F F0            [24]  483 	mov	b,r7
      000121 63 F0 80         [24]  484 	xrl	b,#0x80
      000124 95 F0            [12]  485 	subb	a,b
      000126 50 0A            [24]  486 	jnc	00113$
                                    487 ;	.\read.c:56: for(int i = 0; i < p1; i++){
      000128 05*05            [12]  488 	inc	_read_RX_buffer_i_30001_29
      00012A E4               [12]  489 	clr	a
      00012B B5*05 BD         [24]  490 	cjne	a,_read_RX_buffer_i_30001_29,00128$
      00012E 05*06            [12]  491 	inc	(_read_RX_buffer_i_30001_29 + 1)
      000130 80 B9            [24]  492 	sjmp	00128$
      000132                        493 00113$:
                                    494 ;	.\read.c:63: P2_1 = 1;
                                    495 ;	assignBit
      000132 D2 A1            [12]  496 	setb	_P2_1
                                    497 ;	.\read.c:64: ret = p1;
      000134 8B 04            [24]  498 	mov	ar4,r3
                                    499 ;	.\read.c:65: break;
                                    500 ;	.\read.c:66: case 1:
      000136 80 4B            [24]  501 	sjmp	00119$
      000138                        502 00114$:
                                    503 ;	.\read.c:67: P2_1 = 0;
                                    504 ;	assignBit
      000138 C2 A1            [12]  505 	clr	_P2_1
                                    506 ;	.\read.c:68: for(int i = 0; i < rw_size; i++){
      00013A 7E 00            [12]  507 	mov	r6,#0x00
      00013C 7F 00            [12]  508 	mov	r7,#0x00
      00013E                        509 00131$:
      00013E C3               [12]  510 	clr	c
      00013F EE               [12]  511 	mov	a,r6
      000140 95*00            [12]  512 	subb	a,_rw_size
      000142 EF               [12]  513 	mov	a,r7
      000143 64 80            [12]  514 	xrl	a,#0x80
      000145 85*01 F0         [24]  515 	mov	b,(_rw_size + 1)
      000148 63 F0 80         [24]  516 	xrl	b,#0x80
      00014B 95 F0            [12]  517 	subb	a,b
      00014D 50 30            [24]  518 	jnc	00117$
                                    519 ;	.\read.c:70: buffer[i] = asm_shift_out_2();
      00014F EE               [12]  520 	mov	a,r6
      000150 24r00            [12]  521 	add	a, #_buffer
      000152 F9               [12]  522 	mov	r1,a
      000153 C0 07            [24]  523 	push	ar7
      000155 C0 06            [24]  524 	push	ar6
      000157 C0 01            [24]  525 	push	ar1
      000159 12r00r00         [24]  526 	lcall	_asm_shift_out_2
      00015C E5 82            [12]  527 	mov	a, dpl
      00015E D0 01            [24]  528 	pop	ar1
      000160 D0 06            [24]  529 	pop	ar6
      000162 D0 07            [24]  530 	pop	ar7
      000164 F7               [12]  531 	mov	@r1,a
                                    532 ;	.\read.c:71: if(i >= buffer_size){
      000165 AB*00            [24]  533 	mov	r3,_buffer_size
      000167 7D 00            [12]  534 	mov	r5,#0x00
      000169 C3               [12]  535 	clr	c
      00016A EE               [12]  536 	mov	a,r6
      00016B 9B               [12]  537 	subb	a,r3
      00016C EF               [12]  538 	mov	a,r7
      00016D 64 80            [12]  539 	xrl	a,#0x80
      00016F 8D F0            [24]  540 	mov	b,r5
      000171 63 F0 80         [24]  541 	xrl	b,#0x80
      000174 95 F0            [12]  542 	subb	a,b
      000176 50 07            [24]  543 	jnc	00117$
                                    544 ;	.\read.c:68: for(int i = 0; i < rw_size; i++){
      000178 0E               [12]  545 	inc	r6
      000179 BE 00 C2         [24]  546 	cjne	r6,#0x00,00131$
      00017C 0F               [12]  547 	inc	r7
      00017D 80 BF            [24]  548 	sjmp	00131$
      00017F                        549 00117$:
                                    550 ;	.\read.c:75: P2_1 = 1;
                                    551 ;	assignBit
      00017F D2 A1            [12]  552 	setb	_P2_1
                                    553 ;	.\read.c:76: ret = rw_size;
      000181 AC*00            [24]  554 	mov	r4,_rw_size
                                    555 ;	.\read.c:80: }
      000183                        556 00119$:
                                    557 ;	.\read.c:81: end();
      000183 C0 04            [24]  558 	push	ar4
      000185 12r00r00         [24]  559 	lcall	_end
      000188 D0 04            [24]  560 	pop	ar4
                                    561 ;	.\read.c:83: rw_ptr += rw_size;
      00018A E5*00            [12]  562 	mov	a,_rw_size
      00018C 25*00            [12]  563 	add	a, _rw_ptr
      00018E F5*00            [12]  564 	mov	_rw_ptr,a
      000190 E5*01            [12]  565 	mov	a,(_rw_size + 1)
      000192 35*01            [12]  566 	addc	a, (_rw_ptr + 1)
      000194 F5*01            [12]  567 	mov	(_rw_ptr + 1),a
                                    568 ;	.\read.c:85: switch (*socket)
      000196 85*00 82         [24]  569 	mov	dpl,_read_RX_buffer_socket_10000_21
      000199 85*01 83         [24]  570 	mov	dph,(_read_RX_buffer_socket_10000_21 + 1)
      00019C 85*02 F0         [24]  571 	mov	b,(_read_RX_buffer_socket_10000_21 + 2)
      00019F 12r00r00         [24]  572 	lcall	__gptrget
      0001A2 FF               [12]  573 	mov	r7,a
      0001A3 60 05            [24]  574 	jz	00120$
                                    575 ;	.\read.c:87: case 0:
      0001A5 BF 01 66         [24]  576 	cjne	r7,#0x01,00123$
      0001A8 80 33            [24]  577 	sjmp	00121$
      0001AA                        578 00120$:
                                    579 ;	.\read.c:88: send_2(0x0028, 0x0C, GET_HIGH_BITS(rw_ptr), GET_LOW_BITS(rw_ptr));
      0001AA E5*01            [12]  580 	mov	a,(_rw_ptr + 1)
      0001AC F5*00            [12]  581 	mov	_send_2_PARM_3,a
      0001AE 33               [12]  582 	rlc	a
      0001AF 95 E0            [12]  583 	subb	a,acc
      0001B1 F5*01            [12]  584 	mov	(_send_2_PARM_3 + 1),a
      0001B3 85*00*00         [24]  585 	mov	_send_2_PARM_4,_rw_ptr
      0001B6 75*01 00         [24]  586 	mov	(_send_2_PARM_4 + 1),#0x00
      0001B9 75*00 0C         [24]  587 	mov	_send_2_PARM_2,#0x0c
      0001BC 75*01 00         [24]  588 	mov	(_send_2_PARM_2 + 1),#0x00
      0001BF 90 00 28         [24]  589 	mov	dptr,#0x0028
      0001C2 C0 04            [24]  590 	push	ar4
      0001C4 12r00r00         [24]  591 	lcall	_send_2
                                    592 ;	.\read.c:89: send_1(0x0001, 0x0C, 0x40);
      0001C7 75*00 0C         [24]  593 	mov	_send_1_PARM_2,#0x0c
      0001CA 75*01 00         [24]  594 	mov	(_send_1_PARM_2 + 1),#0x00
      0001CD 75*00 40         [24]  595 	mov	_send_1_PARM_3,#0x40
      0001D0 75*01 00         [24]  596 	mov	(_send_1_PARM_3 + 1),#0x00
      0001D3 90 00 01         [24]  597 	mov	dptr,#0x0001
      0001D6 12r00r00         [24]  598 	lcall	_send_1
      0001D9 D0 04            [24]  599 	pop	ar4
                                    600 ;	.\read.c:90: break;
                                    601 ;	.\read.c:91: case 1: 
      0001DB 80 31            [24]  602 	sjmp	00123$
      0001DD                        603 00121$:
                                    604 ;	.\read.c:92: send_2(0x0028, 0x2C, GET_HIGH_BITS(rw_ptr), GET_LOW_BITS(rw_ptr));
      0001DD E5*01            [12]  605 	mov	a,(_rw_ptr + 1)
      0001DF F5*00            [12]  606 	mov	_send_2_PARM_3,a
      0001E1 33               [12]  607 	rlc	a
      0001E2 95 E0            [12]  608 	subb	a,acc
      0001E4 F5*01            [12]  609 	mov	(_send_2_PARM_3 + 1),a
      0001E6 85*00*00         [24]  610 	mov	_send_2_PARM_4,_rw_ptr
      0001E9 75*01 00         [24]  611 	mov	(_send_2_PARM_4 + 1),#0x00
      0001EC 75*00 2C         [24]  612 	mov	_send_2_PARM_2,#0x2c
      0001EF 75*01 00         [24]  613 	mov	(_send_2_PARM_2 + 1),#0x00
      0001F2 90 00 28         [24]  614 	mov	dptr,#0x0028
      0001F5 C0 04            [24]  615 	push	ar4
      0001F7 12r00r00         [24]  616 	lcall	_send_2
                                    617 ;	.\read.c:93: send_1(0x0001, 0x2C, 0x40);
      0001FA 75*00 2C         [24]  618 	mov	_send_1_PARM_2,#0x2c
      0001FD 75*01 00         [24]  619 	mov	(_send_1_PARM_2 + 1),#0x00
      000200 75*00 40         [24]  620 	mov	_send_1_PARM_3,#0x40
      000203 75*01 00         [24]  621 	mov	(_send_1_PARM_3 + 1),#0x00
      000206 90 00 01         [24]  622 	mov	dptr,#0x0001
      000209 12r00r00         [24]  623 	lcall	_send_1
      00020C D0 04            [24]  624 	pop	ar4
                                    625 ;	.\read.c:97: }
      00020E                        626 00123$:
                                    627 ;	.\read.c:99: return ret;
      00020E 8C 82            [24]  628 	mov	dpl, r4
                                    629 ;	.\read.c:100: }
      000210 22               [24]  630 	ret
                                    631 	.area CSEG    (CODE)
                                    632 	.area CONST   (CODE)
                                    633 	.area XINIT   (CODE)
                                    634 	.area CABS    (ABS,CODE)
